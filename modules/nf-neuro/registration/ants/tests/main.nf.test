nextflow_process {

    name "Test Process REGISTRATION_ANTS"
    script "../main.nf"
    process "REGISTRATION_ANTS"

    tag "modules"
    tag "modules_nfcore"
    tag "registration"
    tag "registration/ants"

    tag "subworkflows"
    tag "subworkflows/load_test_data"

    setup {
            run("LOAD_TEST_DATA", alias: "LOAD_DATA") {
                script "../../../../../subworkflows/nf-neuro/load_test_data/main.nf"
                process {
                    """
                    input[0] = Channel.from( [ "T1w.zip", "b0.zip" ] )
                    input[1] = "test.load-test-data"
                    """
                }
            }
        }

    test("registration - ants") {
        config "./nextflow.config"
        when {
            process {
                """
                ch_split_test_data = LOAD_DATA.out.test_data_directory
                    .branch{
                        T1w: it.simpleName == "T1w"
                        b0: it.simpleName == "b0"
                    }
                ch_T1w = ch_split_test_data.T1w.map{
                    test_data_directory -> [
                        [ id:'test' ],
                        file("\${test_data_directory}/T1w.nii.gz")
                    ]
                }
                ch_b0 = ch_split_test_data.b0.map{
                    test_data_directory -> [
                        [ id:'test' ],
                        file("\${test_data_directory}/b0.nii.gz")
                    ]
                }
                input[0] = ch_b0
                    .join(ch_T1w)
                    .map{ it + [[]] }
                """
            }
        }
        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match() }
            )
        }
    }

    test("registration - ants - quick") {
        config "./nextflow_quick.config"
        when {
            process {
                """
                ch_split_test_data = LOAD_DATA.out.test_data_directory
                    .branch{
                        T1w: it.simpleName == "T1w"
                        b0: it.simpleName == "b0"
                    }
                ch_T1w = ch_split_test_data.T1w.map{
                    test_data_directory -> [
                        [ id:'test' ],
                        file("\${test_data_directory}/T1w.nii.gz")
                    ]
                }
                ch_b0 = ch_split_test_data.b0.map{
                    test_data_directory -> [
                        [ id:'test' ],
                        file("\${test_data_directory}/b0.nii.gz")
                    ]
                }
                input[0] = ch_b0
                    .join(ch_T1w)
                    .map{ it + [[]] }
                """
            }
        }
        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match() }
            )
        }
    }

    test("registration - ants - options") {
        config "./nextflow_options.config"
        when {
            process {
                """
                ch_split_test_data = LOAD_DATA.out.test_data_directory
                    .branch{
                        T1w: it.simpleName == "T1w"
                        b0: it.simpleName == "b0"
                    }
                ch_T1w = ch_split_test_data.T1w.map{
                    test_data_directory -> [
                        [ id:'test' ],
                        file("\${test_data_directory}/T1w.nii.gz"),
                        file("\${test_data_directory}/T1w_mask.nii.gz")
                    ]
                }
                ch_b0 = ch_split_test_data.b0.map{
                    test_data_directory -> [
                        [ id:'test' ],
                        file("\${test_data_directory}/b0.nii.gz")
                    ]
                }
                input[0] = ch_b0
                    .join(ch_T1w)
                """
            }
        }
        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match() }
            )
        }
    }
}
