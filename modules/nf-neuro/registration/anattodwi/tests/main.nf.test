nextflow_process {

    name "Test Process REGISTRATION_ANATTODWI"
    script "../main.nf"
    process "REGISTRATION_ANATTODWI"

    tag "modules"
    tag "modules_nfcore"
    tag "registration"
    tag "registration/anattodwi"

    tag "subworkflows"
    tag "subworkflows/load_test_data"

    config "./nextflow.config"

    setup {
            run("LOAD_TEST_DATA", alias: "LOAD_DATA") {
                script "../../../../../subworkflows/nf-neuro/load_test_data/main.nf"
                process {
                    """
                    input[0] = Channel.from( [ "T1w.zip", "b0.zip", "dti.zip" ] )
                    input[1] = "test.load-test-data"
                    """
                }
            }
        }

    test("registration - anattodwi") {
        when {
            process {
                """
                ch_split_test_data = LOAD_DATA.out.test_data_directory
                    .branch{
                        t1w: it.simpleName == "T1w"
                        b0: it.simpleName == "b0"
                        dti: it.simpleName == "dti"
                    }
                ch_t1w = ch_split_test_data.t1w.map{
                    test_data_directory -> [
                        [ id:'test', single_end:false ],
                        file("\${test_data_directory}/T1w.nii.gz")
                    ]
                }
                ch_b0 = ch_split_test_data.b0.map{
                    test_data_directory -> [
                        [ id:'test', single_end:false ],
                        file("\${test_data_directory}/b0.nii.gz")
                    ]
                }
                ch_fa = ch_split_test_data.dti.map{
                    test_data_directory -> [
                        [ id:'test', single_end:false ],
                        file("\${test_data_directory}/fa.nii.gz")
                    ]
                }
                input[0] = ch_t1w
                    .join(ch_b0)
                    .join(ch_fa)
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match() }
            )
        }
    }
}
