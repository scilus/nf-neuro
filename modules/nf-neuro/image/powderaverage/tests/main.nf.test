nextflow_process {

    name "Test Process IMAGE_POWDERAVERAGE"
    script "../main.nf"
    process "IMAGE_POWDERAVERAGE"

    tag "modules"
    tag "modules_nfcore"
    tag "image"
    tag "image/powderaverage"

    tag "subworkflows"
    tag "subworkflows/load_test_data"

    setup {
        run("LOAD_TEST_DATA", alias: "LOAD_DATA") {
            script "../../../../../subworkflows/nf-neuro/load_test_data/main.nf"
            process {
                """
                input[0] = Channel.from( [ "heavy.zip" ] )
                input[1] = "test.load-test-data"
                """
            }
        }
    }

    test("powderaverage - no mask and no shell") {

        config "./nextflow_noshells.config"

        when {
            process {
                """
                input[0] = LOAD_DATA.out.test_data_directory.map{
                    test_data_directory -> [
                        [ id:'test', single_end:false ], // meta map
                        file("\${test_data_directory}/dwi/dwi.nii.gz"),
                        file("\${test_data_directory}/dwi/dwi.bval"),
                        []
                    ]
                }
                input[1] = params.b0_thr
                input[2] = params.shells
                input[3] = params.shell_thr
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match() }
            )
        }
    }

    test("powderaverage - with mask and shells") {

        config "./nextflow_shells.config"

        when {
            process {
                """
                input[0] = LOAD_DATA.out.test_data_directory.map{
                    test_data_directory -> [
                        [ id:'test', single_end:false ], // meta map
                        file("\${test_data_directory}/dwi/dwi.nii.gz"),
                        file("\${test_data_directory}/dwi/dwi.bval"),
                        file("\${test_data_directory}/dwi/mask.nii.gz")
                    ]
                }
                input[1] = params.b0_thr
                input[2] = params.shells
                input[3] = params.shell_thr
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match() }
            )
        }
    }
}
