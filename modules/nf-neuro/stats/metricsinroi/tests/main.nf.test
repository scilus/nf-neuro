nextflow_process {

    name "Test Process STATS_METRICSINROI"
    script "../main.nf"
    process "STATS_METRICSINROI"

    tag "modules"
    tag "modules_nfcore"
    tag "stats"
    tag "stats/metricsinroi"

    tag "subworkflows"
    tag "subworkflows/load_test_data"

    setup {
        run("LOAD_TEST_DATA", alias: "LOAD_DATA") {
            script "../../../../../subworkflows/nf-neuro/load_test_data/main.nf"
            process {
                """
                input[0] = Channel.from( [ "tractometry.zip", "plot.zip" ] )
                input[1] = "test.load-test-data"
                """
            }
        }
    }

    test("stats - metrics in ROI") {

        config "./nextflow.config"

        when {
            process {
                """
                ch_split_test_data = LOAD_DATA.out.test_data_directory
                    .branch{
                        tractometry: it.simpleName == "tractometry"
                        plot: it.simpleName == "plot"
                    }
                input[0] = ch_split_test_data.tractometry.map{
                    test_data_directory -> [
                        [ id:'test', single_end:false ], // meta map
                        file("\${test_data_directory}/mni_masked.nii.gz"),
                        file("\${test_data_directory}/IFGWM.nii.gz"),
                        []
                    ]
                }
                """
            }
        }
        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match() }
            )
        }
    }

    test("stats - metrics in Label") {
        config "./nextflow_label.config"
        when {
            process {
                """
                ch_split_test_data = LOAD_DATA.out.test_data_directory
                    .branch{
                        tractometry: it.simpleName == "tractometry"
                        plot: it.simpleName == "plot"
                    }
                input[0] = ch_split_test_data.plot.map{
                    test_data_directory -> [
                        [ id:'test', single_end:false ], // meta map
                        [   file("\${test_data_directory}/fa.nii.gz"),
                            file("\${test_data_directory}/ad.nii.gz")],
                            file("\${test_data_directory}/atlas_brainnetome.nii.gz"),
                            file("\${test_data_directory}/atlas_brainnetome.json")
                    ]
                }
                """
            }
        }
        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match() }
            )
        }
    }

    test("stats - metrics in roi -stub-run") {
        options "-stub-run"
        when {
            process {
                """
                ch_split_test_data = LOAD_DATA.out.test_data_directory
                    .branch{
                        tractometry: it.simpleName == "tractometry"
                        plot: it.simpleName == "plot"
                    }
                input[0] = ch_split_test_data.plot.map{
                    test_data_directory -> [
                        [   id:'test', single_end:false ], // meta map
                        [   file("\${test_data_directory}/fa.nii.gz"),
                            file("\${test_data_directory}/ad.nii.gz")],
                            file("\${test_data_directory}/atlas_brainnetome.nii.gz"),
                            file("\${test_data_directory}/atlas_brainnetome.json")
                    ]
                }
                """
            }
        }
        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out.versions).match() }
            )
        }
    }
}
