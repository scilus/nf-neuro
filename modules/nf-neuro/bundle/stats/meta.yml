# yaml-language-server: $schema=https://raw.githubusercontent.com/nf-core/modules/master/modules/meta-schema.json
name: bundle_stats
description: |
  Compile statistics on bundle profiles. Uses the data after segmenting the tractogram into different bundles, which in turn are segmented into different sections.
  This module allows you to perform statistical analysis on bundles using metrics maps. You can choose from several types of statistics.
  -----------  Available statistics  -----------
  volume:
    - volume_info: volume, volume_endpoints
    - streamlines_info: streamlines_count, avg_length (in mm or in number of point), average step size, min_length, max_length.
    - shape_info: span, curl, diameter, elongation, surface area, irregularity, end surface area, radius, end surface irregularity, mean_curvature, fractal dimension.
      ** The diameter, here, is a simple estimation using volume / length.
  length:
    number of streamlines, and mean / min / max / std of :
    - length in number of points
    - length in mm
    - step size.
  endpoints:
    Computes the endpoint map of a bundle. The endpoint map is simply a count of the number of streamlines that start or end in each voxel.
    Then, Compute the statistics (mean, std) of scalar maps, which can represent diffusion metrics, in endpoint map.
  mean std:
    - mean and std for each metric.
  streamline count:
    - number of streamlines in a tractogram. (as this information is given by the volume stat you can choose to want only the streamlines count by deactivating volume and activating streamlines count.)
  volume per labels:
    - bundle volume per label in mm3. This script supports anisotropic voxels resolution.
      Volume is estimated by counting the number of voxel occupied by each label and multiplying it by the volume of a single voxel.
  mean std per labels:
    - mean and std for each metric along the bundle for each point(labels).
  **To create label_map and distance_map, see scil_bundle_label_map.py
keywords:
  - Bundle
  - Labels
  - Statistic
  - Volume
  - Length
  - Endpoint
  - Mean std
  - Streamlines count
  - json
tools:
  - scilpy:
      description: The Sherbrooke Connectivity Imaging Lab (SCIL) Python dMRI processing
        toolbox.
      homepage: https://github.com/scilus/scilpy.git
      identifier: ""
input:
  - - meta:
        type: map
        description: |
          Groovy Map containing sample information
          e.g. `[ id:'sample1', single_end:false ]`
    - bundles:
        type: file
        description: Fiber bundle file to compute statistics on.
        pattern: "*.trk"
        mandatory: true
        ontologies: []
    - labels_map:
        type: file
        description: label map of the corresponding fiber bundle. this file must have
          the same dimension than bundle file and have datatype in int. If you have
          multiple bundles, it must have the same numbers of sections.
        pattern: "*.nii.gz"
        mandatory: true
        ontologies:
          - edam: http://edamontology.org/format_3989 # GZIP format
    - metrics:
        type: file
        description: Nifti file to compute statistics on. Probably some tractometry
          measure(s) such as FA, MD, RD, ... The metrics has to follow a specific naming
          convention.
        pattern: "*_{bundle_name}_{metric_name}.nii.gz"
        mandatory: true
        ontologies: []
    - lesions:
        type: file
        description: Nifti lesion volume to compute statistics on. The lesion mask must
          be a binary mask.
        pattern: "*.nii.gz"
        mandatory: false
        ontologies:
          - edam: http://edamontology.org/format_3989 # GZIP format
args:
  - density_weighting:
      type: boolean
      description: If set, weights statistics by the number of fibers passing through
        each voxel.
      default: false
  - normalize_weights:
      type: boolean
      description: If set, the weights will be normalized to the [0,1] range.
      default: false
  - length_stats:
      type: boolean
      description: If set, compute the length stats of the streamlines.
      default: true
  - endpoints:
      type: boolean
      description: If set, compute the endpoint map of the bundle.
      default: false
  - mean_std:
      type: boolean
      description: If set, compute the mean and std of the metrics along the bundle.
      default: false
  - volume:
      type: boolean
      description: If set, compute the volume of the bundle(s).
      default: false
  - lesions_stats:
      type: boolean
      description: If set, compute the statistics of the lesion volume.
      default: false
  - min_lesion_vol:
      type: int
      description: Minimum volume of a lesion to be considered (mm).
      default: 7
  - streamline_count:
      type: boolean
      description: If set, compute the number of streamlines in a bundle.
      default: false
  - volume_per_labels:
      type: boolean
      description: If set, compute bundle volume per label in mm3.
      default: false
  - mean_std_per_point:
      type: boolean
      description: If set, compute the mean and std of the metrics along the bundle
        for each point(labels).
      default: false
  - run_qc:
      type: boolean
      description: If set, run the QC for the mean_std.json file.
      default: false
output:
  length:
    - - meta:
          type: map
          description: |
            Groovy Map containing sample information
            e.g. `[ id:'sample1', single_end:false ]`
      - "*__length_stats.json":
          type: file
          description: |
            Information on a bundle(s) : number of streamlines, mean / min / max / std
            of length in number of points, length in mm and step size.
          pattern: "*__length_stats.json"
          ontologies:
            - edam: http://edamontology.org/format_3464 # JSON
  endpoints_raw:
    - - meta:
          type: map
          description: |
            Groovy Map containing sample information
            e.g. `[ id:'sample1', single_end:false ]`
      - "*__endpoints_map_raw.json":
          type: file
          description: |
            Estimation of the cortical area affected by the bundle(s)
            (assuming streamlines start/end in the cortex).
          pattern: "*__endpoints_map_raw.json"
          ontologies:
            - edam: http://edamontology.org/format_3464 # JSON
  endpoints_metric_stats:
    - - meta:
          type: map
          description: |
            Groovy Map containing sample information
            e.g. `[ id:'sample1', single_end:false ]`
      - "*__endpoints_metric_stats.json":
          type: file
          description: Statistics of metrics at the bundle(s) endpoints.
          pattern: "*__endpoints_metric_stats.json"
          ontologies:
            - edam: http://edamontology.org/format_3464 # JSON
  mean_std:
    - - meta:
          type: map
          description: |
            Groovy Map containing sample information
            e.g. `[ id:'sample1', single_end:false ]`
      - "*__mean_std.json":
          type: file
          description: Average the metric values of all voxels occupied by the bundle(s).
          pattern: "*__mean_std.json"
          ontologies:
            - edam: http://edamontology.org/format_3464 # JSON
  volume:
    - - meta:
          type: map
          description: |
            Groovy Map containing sample information
            e.g. `[ id:'sample1', single_end:false ]`
      - "*__volume.json":
          type: file
          description: Volume occupied by the bundle(s).
          pattern: "*__volume.json"
          ontologies:
            - edam: http://edamontology.org/format_3464 # JSON
  volume_lesions:
    - - meta:
          type: map
          description: |
            Groovy Map containing sample information
            e.g. `[ id:'sample1', single_end:false ]`
      - "*__volume_lesions.json":
          type: file
          description: Bundle(s) volume in each lesions in mm3.
          pattern: "*__volume_lesion.json"
          ontologies:
            - edam: http://edamontology.org/format_3464 # JSON
  streamline_count:
    - - meta:
          type: map
          description: |
            Groovy Map containing sample information
            e.g. `[ id:'sample1', single_end:false ]`
      - "*__streamline_count.json":
          type: file
          description: Number of streamlines in the bundle(s).
          pattern: "*__streamline_count.json"
          ontologies:
            - edam: http://edamontology.org/format_3464 # JSON
  streamline_count_lesions:
    - - meta:
          type: map
          description: |
            Groovy Map containing sample information
            e.g. `[ id:'sample1', single_end:false ]`
      - "*__streamline_count_lesions.json":
          type: file
          description: Number of streamlines in each lesions.
          pattern: "*__streamline_count_lesions.json"
          ontologies:
            - edam: http://edamontology.org/format_3464 # JSON
  volume_per_labels:
    - - meta:
          type: map
          description: |
            Groovy Map containing sample information
            e.g. `[ id:'sample1', single_end:false ]`
      - "*__volume_per_label.json":
          type: file
          description: |
            Bundle volume per label in mm3. Volume is estimated by
            counting the number of voxel occupied by each label and
            multiplying it by the volume of a single voxel.
          pattern: "*__volume_per_label.json"
          ontologies:
            - edam: http://edamontology.org/format_3464 # JSON
  volume_per_labels_lesions:
    - - meta:
          type: map
          description: |
            Groovy Map containing sample information
            e.g. `[ id:'sample1', single_end:false ]`
      - "*__volume_per_label_lesions.json":
          type: file
          description: Bundle(s) volume per label in each lesions in mm3.
          pattern: "*__volume_per_label_lesions.json"
          ontologies:
            - edam: http://edamontology.org/format_3464 # JSON
  mean_std_per_point:
    - - meta:
          type: map
          description: |
            Groovy Map containing sample information
            e.g. `[ id:'sample1', single_end:false ]`
      - "*__mean_std_per_point.json":
          type: file
          description: Average metric values of all voxels occupied by the bundle per
            label.
          pattern: "*__mean_std_per_point.json"
          ontologies:
            - edam: http://edamontology.org/format_3464 # JSON
  lesion_stats:
    - - meta:
          type: map
          description: |
            Groovy Map containing sample information
            e.g. `[ id:'sample1', single_end:false ]`
      - "*__lesion_stats.json":
          type: file
          description: Lesion-wise volume measure.
          pattern: "*__lesion_stats.json"
          ontologies:
            - edam: http://edamontology.org/format_3464 # JSON
  endpoints_head:
    - - meta:
          type: map
          description: |
            Groovy Map containing sample information
            e.g. `[ id:'sample1', single_end:false ]`
      - "*_endpoints_map_head.nii.gz":
          type: file
          description: |
            Endpoint head map of bundle. The endpoint head map is simply
            a count of the number of streamlines that start in each voxel.
          pattern: "*__endpoints_map_head.nii.gz"
          ontologies:
            - edam: http://edamontology.org/format_3989 # GZIP format
  endpoints_tail:
    - - meta:
          type: map
          description: |
            Groovy Map containing sample information
            e.g. `[ id:'sample1', single_end:false ]`
      - "*_endpoints_map_tail.nii.gz":
          type: file
          description: |
            Endpoint tail map of bundle. The endpoint tail map is simply
            a count of the number of streamlines that end in each voxel.
          pattern: "*__endpoints_map_tail.nii.gz"
          ontologies:
            - edam: http://edamontology.org/format_3989 # GZIP format
  lesion_map:
    - - meta:
          type: map
          description: |
            Groovy Map containing sample information
            e.g. `[ id:'sample1', single_end:false ]`
      - "*_lesion_map.nii.gz":
          type: file
          description: Nifti files of labeled lesion(s) map for each bundles.
          pattern: "*__lesion_map.nii.gz"
          ontologies:
            - edam: http://edamontology.org/format_3989 # GZIP format
  mqc:
    - - meta:
          type: map
          description: |
            Groovy Map containing sample information
            e.g. `[ id:'sample1', single_end:false ]`
      - "*_QC.tsv":
          type: file
          description: QC file containing mean values from the mean_std.json file.
          pattern: "*_QC.tsv"
          ontologies:
            - edam: http://edamontology.org/format_3475 # TSV
  versions:
    - versions.yml:
        type: file
        description: File containing software versions
        pattern: versions.yml
        ontologies:
          - edam: http://edamontology.org/format_3750 # YAML
authors:
  - "@ThoumyreStanislas"
maintainers:
  - "@ThoumyreStanislas"
