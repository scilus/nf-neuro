nextflow_workflow {

    name "Test Subworkflow ANATOMICAL_SEGMENTATION"
    script "../main.nf"
    workflow "ANATOMICAL_SEGMENTATION"

    tag "subworkflows"
    tag "subworkflows_nfcore"
    tag "subworkflows/anatomical_segmentation"

    tag "segmentation"
    tag "segmentation/fastseg"
    tag "segmentation/freesurferseg"
    tag "segmentation/synthseg"

    tag "load_test_data"

        setup {
            run("LOAD_TEST_DATA", alias: "LOAD_DATA") {
                script "../../load_test_data/main.nf"
                process {
                    """
                    input[0] = Channel.from( [ "T1w.zip", "freesurfer_nifti.zip", "freesurfer.zip" ] )
                    input[1] = "test.load-test-data"
                    """
                }
            }
        }

    test("anatomical_segmentation - fslfast") {
        config "./nextflow.config"
        when {
            workflow {
                """
                ch_split_test_data = LOAD_DATA.out.test_data_directory
                    .branch{
                        t1w: it.simpleName == "T1w"
                        freesurfer_nifti: it.simpleName == "freesurfer_nifti"
                        freesurfer: it.simpleName == "freesurfer"
                    }
                input[0] = ch_split_test_data.t1w.map{
                    test_data_directory -> [
                        [ id:'test' ],
                        file("\${test_data_directory}/T1w.nii.gz", checkIfExists: true)
                    ]
                }
                input[1] = Channel.empty()
                input[2] = Channel.empty()
                input[3] = Channel.empty()
                """
            }
        }

        then {
            assertAll(
                { assert workflow.success},
                { assert snapshot(workflow.out).match()}
            )
        }
    }

    test("anatomical_segmentation - freesurferseg") {
        config "./nextflow.config"
        when {
            workflow {
                """
                ch_split_test_data = LOAD_DATA.out.test_data_directory
                    .branch{
                        t1w: it.simpleName == "T1w"
                        freesurfer_nifti: it.simpleName == "freesurfer_nifti"
                        freesurfer: it.simpleName == "freesurfer"
                    }
                input[0] = Channel.empty()
                input[1] = ch_split_test_data.freesurfer_nifti.map{
                    test_data_directory -> [
                        [ id:'test', single_end:false ], // meta map
                        file("\${test_data_directory}/aparc+aseg.nii.gz", checkIfExists: true),
                        file("\${test_data_directory}/wmparc.nii.gz", checkIfExists: true)
                    ]
                }
                input[2] = Channel.empty()
                input[3] = Channel.empty()
                """
            }
        }

        then {
            assertAll(
                { assert workflow.success },
                { assert snapshot(workflow.out).match() }
            )
        }
    }

    test("anatomical_segmentation - both") {
        config "./nextflow.config"
        when {
            workflow {
                """
                ch_split_test_data = LOAD_DATA.out.test_data_directory
                    .branch{
                        t1w: it.simpleName == "T1w"
                        freesurfer_nifti: it.simpleName == "freesurfer_nifti"
                        freesurfer: it.simpleName == "freesurfer"
                    }
                input[0] = ch_split_test_data.t1w.map{
                    test_data_directory -> [
                        [ id:'test' ],
                        file("\${test_data_directory}/T1w.nii.gz", checkIfExists: true)
                    ]
                }
                input[1] = ch_split_test_data.freesurfer_nifti.map{
                    test_data_directory -> [
                        [ id:'test' ], // meta map
                        file("\${test_data_directory}/aparc+aseg.nii.gz", checkIfExists: true),
                        file("\${test_data_directory}/wmparc.nii.gz", checkIfExists: true)
                    ]
                }
                input[2] = Channel.empty()
                input[3] = Channel.empty()
                """
            }
        }

        then {
            assertAll(
                { assert workflow.success },
                { assert snapshot(workflow.out).match() }
            )
        }
    }

    test("anatomical_segmentation - synthseg") {
        config "./nextflow_synthseg.config"
        when {
            workflow {
                """
                ch_split_test_data = LOAD_DATA.out.test_data_directory
                    .branch{
                        t1w: it.simpleName == "T1w"
                        freesurfer_nifti: it.simpleName == "freesurfer_nifti"
                        freesurfer: it.simpleName == "freesurfer"
                    }
                input[0] = ch_split_test_data.t1w.map{
                    test_data_directory -> [
                        [ id:'test' ],
                        file("\${test_data_directory}/T1w.nii.gz", checkIfExists: true)
                    ]
                }
                input[1] = Channel.empty()
                input[2] = Channel.empty()
                input[3] = ch_split_test_data.freesurfer.map{
                    test_data_directory -> [
                        file("\${test_data_directory}/license.txt", checkIfExists: true)
                    ]
                }
                """
            }
        }

        then {
            assertAll(
                { assert workflow.success},
                { assert snapshot(
                    file(workflow.out.wm_mask.get(0).get(1)).name,
                    file(workflow.out.gm_mask.get(0).get(1)).name,
                    file(workflow.out.csf_mask.get(0).get(1)).name,
                    file(workflow.out.wm_map.get(0).get(1)).name,
                    file(workflow.out.gm_map.get(0).get(1)).name,
                    file(workflow.out.csf_map.get(0).get(1)).name,
                    file(workflow.out.seg.get(0).get(1)).name,
                    workflow.out.versions
                ).match()}
            )
        }
    }
}
